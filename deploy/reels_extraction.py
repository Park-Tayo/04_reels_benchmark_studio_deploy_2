import openai
import os
from pathlib import Path
import tempfile
from api_config import get_api_config
import streamlit as st

# 상대 경로로 변경 (스트림릿 클라우드 호환)
BASE_DIR = Path(__file__).parent.parent

# 임시 파일 디렉토리 설정
TEMP_DIR = Path(tempfile.gettempdir()) / "reels_benchmark"
os.makedirs(TEMP_DIR, exist_ok=True)

@st.cache_data(ttl=3600)
def analyze_with_gpt4(info, input_data):
        api_config = get_api_config()
        client = openai.OpenAI(api_key=api_config["api_key"])
        
        messages = [
            {
                "role": "system",
                "content": f"""
                다음 릴스를 분석하고, 입력된 주제에 맞게 벤치마킹 기획을 해주세요:
                
                스크립트: {info['refined_transcript']}
                캡션: {info['caption']}
                
                사용자 입력 정보:
                - 초반 3초 카피라이팅: {input_data['video_analysis']['intro_copy']}
                - 초반 3초 영상 구성: {input_data['video_analysis']['intro_structure']}
                - 나레이션: {input_data['video_analysis']['narration']}
                - 음악: {input_data['video_analysis']['music']}
                - 폰트: {input_data['video_analysis']['font']}
                
                벤치마킹할 새로운 주제: {input_data['content_info']['topic']}
                
                위 릴스의 장점과 특징을 분석한 후, 새로운 주제에 맞게 벤치마킹하여 구체적인 스크립트, 캡션, 영상 기획을 제시해주세요.
                """
            },
            {
                "role": "user",
                "content": """
                당신은 릴스 분석 전문가입니다. 다음 형식으로 분석 결과를 제공해주세요. 
                각 항목에 대해 ✅/❌를 표시하고, 그 판단의 근거가 되는 스크립트나 캡션의 구체적인 내용을 인용해주세요. 
                여기서 모수란 이 내용이 얼마나 많은 사람들의 관심을 끌 수 있는지에 대한 것입니다.
                문제 해결이란 시청자가 갖고 있는 문제를 해결해줄 수 있는지에 대한 것입니다:

                # 1. 주제: 
                - **설명: (이 영상의 주제에 대한 내용)**
                - ✅/❌ **공유 및 저장**: 스크립트/캡션 중 해당 내용
                - ✅/❌ **모수**: 스크립트/캡션 중 해당 내용
                - ✅/❌ **문제해결**: 스크립트/캡션 중 해당 내용
                - ✅/❌ **욕망충족**: 스크립트/캡션 중 해당 내용
                - ✅/❌ **흥미유발**: 스크립트/캡션 중 해당 내용

                # 2. 초반 3초
                ## 카피라이팅 :
                - **설명: (이 영상의 초반 3초 카피라이팅에 대한 내용)**
                - ✅/❌ **구체적 수치**: 스크립트/캡션 중 해당 내용
                - ✅/❌ **뇌 충격**: 스크립트/캡션 중 해당 내용
                - ✅/❌ **이익, 손해 강조**: 스크립트/캡션 중 해당 내용
                - ✅/❌ **권위 강조**: 스크립트/캡션 중 해당 내용

                ## 영상 구성 : 
                - **설명: (이 영상의 초반 3초 영상 구성에 대한 내용)**
                - ✅/❌ **상식 파괴**: 스크립트/캡션 중 해당 내용
                - ✅/❌ **결과 먼저**: 스크립트/캡션 중 해당 내용
                - ✅/❌ **부정 강조**: 스크립트/캡션 중 해당 내용
                - ✅/❌ **공감 유도**: 스크립트/캡션 중 해당 내용

                # 3. 내용 구성: 
                - **설명: (이 영상의 스크립트/캡션의 전체적인 내용 구성에 대한 내용)**
                - ✅/❌ **문제해결**: 스크립트/캡션 중 해당 내용
                - ✅/❌ **호기심 유발**: 스크립트/캡션 중 해당 내용
                - ✅/❌ **행동 유도**: 스크립트/캡션 중 해당 내용
                - ✅/❌ **스토리**: 스크립트/캡션 중 해당 내용
                - ✅/❌ **제안**: 스크립트/캡션 중 해당 내용

                # 4. 개선할 점:
                - ❌ **(항목명)**: 개선할 점 설명 추가 ex. 스크립트/캡션 예시
                
                # 5. 적용할 점:
                - ✅ **(항목명)**: 적용할 점 설명 추가 ex. 스크립트/캡션 중 해당 내용

                # 6. 벤치마킹 적용 기획:
                {f'''
                - 입력하신 주제 "{input_data["content_info"]["topic"]}"에 대한 벤치마킹 적용 기획입니다.
                - 위에서 체크(✅)된 항목들을 모두 반영하여 벤치마킹한 내용입니다.
                
                [시스템 참고용 - 출력하지 말 것]
                - 스크립트: {info['refined_transcript']}
                - 캡션: {info['caption']}
                
                위 스크립트와 캡션을 최대한 유사하게 벤치마킹하여 다음과 같이 작성했습니다:
                
                ## 🎙️ 1. 스크립트 예시:
                [원본 스크립트의 문장 구조, 호흡, 강조점을 거의 그대로 활용하되 새로운 주제에 맞게 변경.
                예를 들어 원본이 "이것 하나만 있으면 ~~" 구조라면, 새로운 주제도 동일한 구조 사용]

                ## ✏️ 2. 캡션 예시:
                [원본 캡션의 구조를 거의 그대로 활용.
                예를 들어 원본이 "✨꿀팁 공개✨" 시작이라면, 새로운 캡션도 동일한 구조 사용.
                이모지, 해시태그 스타일도 원본과 동일하게 구성]

                ## 🎬 3. 영상 기획:
                원본 영상의 구성을 최대한 유사하게 벤치마킹하되, 다음 요소들을 추가/보완했습니다:

                1. **🎯 도입부** (3초):
                   - 💥 **뇌 충격을 주는 구체적 수치 활용** (스크립트/캡션 예시 내용)
                   - 🔄 **상식을 깨는 내용으로 시작** (스크립트/캡션 예시 내용)
                   - ⭐ **결과를 먼저 보여주는 방식 적용** (스크립트/캡션 예시 내용)
                   
                2. **📝 전개**:
                   - **문제 해결형 구조 적용:**
                     * ❓ **명확한 문제 제시** (스크립트/캡션 예시 내용)
                     * ✅ **구체적인 해결책 제시** (스크립트/캡션 예시 내용)
                   - **시청 지속성 확보:**
                     * 🎙️ **나레이션과 영상의 일치성 유지** (스크립트/캡션 예시 내용)
                     * 🎵 **트렌디한 BGM 활용** (스크립트/캡션 예시 내용)
                     * 📹 **고화질 영상 품질 유지** (스크립트/캡션 예시 내용)
                   
                3. **🔚 마무리**:
                   - **행동 유도 요소 포함:**
                     * 💾 **저장/공유 유도 멘트** (스크립트/캡션 예시 내용)
                     * 👥 **팔로우 제안** (스크립트/캡션 예시 내용)
                   - **캡션 최적화:**
                     * 🎣 **첫 줄 후킹** (스크립트/캡션 예시 내용)
                     * 📑 **단락 구분으로 가독성 확보** (스크립트/캡션 예시 내용)
                     * 📊 **구체적 수치/권위 요소 포함** (스크립트/캡션 예시 내용)
                ''' if input_data["content_info"]["topic"] else "주제가 입력되지 않았습니다. 구체적인 기획을 위해 주제를 입력해주세요."}
                """
            }
        ]
        
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=messages,
            temperature=0,
            max_tokens=10000
        )
        
        return response.choices[0].message.content.strip()

